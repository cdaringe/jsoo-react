module type Foo  =
  sig
    val makeProps :
      ?title:string ->
        ?defaultTitle:string ->
          ?meta:metaField array ->
            ?htmlAttributes:htmlAttribute array ->
              children:React.element ->
                ?key:string ->
                  unit ->
                    <
                      title: string option Js_of_ocaml.Js.readonly_prop  ;
                      defaultTitle: string option
                                      Js_of_ocaml.Js.readonly_prop  ;
                      meta: metaField array option
                              Js_of_ocaml.Js.readonly_prop  ;htmlAttributes: 
                                                               htmlAttribute
                                                                 array option
                                                                 Js_of_ocaml.Js.readonly_prop
                                                                ;children: 
                                                                   React.element
                                                                    Js_of_ocaml.Js.readonly_prop
                                                                     > 
                      Js_of_ocaml.Js.t
    val make :
      (<
         title: string option Js_of_ocaml.Js.readonly_prop  ;defaultTitle: 
                                                               string option
                                                                 Js_of_ocaml.Js.readonly_prop
                                                                ;meta: 
                                                                   metaField
                                                                    array
                                                                    option
                                                                    Js_of_ocaml.Js.readonly_prop
                                                                    ;
         htmlAttributes: htmlAttribute array option
                           Js_of_ocaml.Js.readonly_prop  ;children: React.element
                                                                    Js_of_ocaml.Js.readonly_prop
                                                              > 
         Js_of_ocaml.Js.t,
        React.element) React.componentLike
  end
let makeProps
  : ?name:'name ->
      ?key:string ->
        unit ->
          < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
            Js_of_ocaml.Js.t
  =
  fun ?name ->
    fun ?key ->
      fun _ ->
        let open Js_of_ocaml.Js.Unsafe in
          obj
            ((([|(Option.map
                    (fun raw -> ("key", (inject (Js_of_ocaml.Js.string raw))))
                    key);(Option.map (fun raw -> ("name", (inject raw))) name)|]
                 |> Array.to_list)
                |> (List.filter_map (fun x -> x)))
               |> Array.of_list)
let make =
  ((fun ?(name= "") ->
      React.createElementVariadic React.Fragment.make
        (React.Fragment.makeProps ~children:React.null ())
        [React.Dom.createElement "div" ~props:(React.Dom.domProps ())
           [React.string ("Hello " ^ name)];
        React.createElement Hello.make
          (Hello.makeProps ~one:"1"
             ~children:(React.string ("Hello " ^ name)) ())])
  [@warning "-16"])
let make =
  let Test
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    make
      ?name:((fun (type res) ->
                fun (type a0) ->
                  fun (a0 : a0 Js_of_ocaml.Js.t) ->
                    fun
                      (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                      -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res))
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  Test
let makeProps
  : a:'a ->
      b:'b ->
        ?key:string ->
          unit ->
            <
              a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                        Js_of_ocaml.Js.readonly_prop
                                                       > 
              Js_of_ocaml.Js.t
  =
  fun ~a ->
    fun ~b ->
      fun ?key ->
        fun _ ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              ((([|(Option.map
                      (fun raw ->
                         ("key", (inject (Js_of_ocaml.Js.string raw)))) key);(
                   Some ("b", (inject b)));(Some ("a", (inject a)))|] |>
                   Array.to_list)
                  |> (List.filter_map (fun x -> x)))
                 |> Array.of_list)
let make =
  ((fun ~a ->
      ((fun ~b ->
          fun _ ->
            print_endline "This function should be named `Test`";
            React.Dom.createElement "div" ~props:(React.Dom.domProps ()) [])
      [@warning "-16"]))
  [@warning "-16"])
let make =
  let Test
    (Props :
      <
        a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                  Js_of_ocaml.Js.readonly_prop
                                                 > 
        Js_of_ocaml.Js.t)
    =
    make
      ~b:((fun (type res) ->
             fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res))
            (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
      ~a:((fun (type res) ->
             fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
            (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
  Test
module External =
  struct
    let componentProps
      : a:int ->
          b:string ->
            ?key:string ->
              unit ->
                <
                  a: int Js_of_ocaml.Js.readonly_prop  ;b: string
                                                             Js_of_ocaml.Js.readonly_prop
                                                            > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun raw ->
                             ("key", (inject (Js_of_ocaml.Js.string raw))))
                          key);(Some ("b", (inject b)));(Some
                                                           ("a", (inject a)))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    external component :
      (<
         a: int Js_of_ocaml.Js.readonly_prop  ;b: string
                                                    Js_of_ocaml.Js.readonly_prop
                                                   > 
         Js_of_ocaml.Js.t,
        React.element) React.componentLike = ""[@@otherAttribute "bla"]
  end
module Bar =
  struct
    let makeProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun raw ->
                             ("key", (inject (Js_of_ocaml.Js.string raw))))
                          key);(Some ("b", (inject b)));(Some
                                                           ("a", (inject a)))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let make =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                print_endline "This function should be named `Test$Bar`";
                React.Dom.createElement "div" ~props:(React.Dom.domProps ())
                  [])
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Test$Bar
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        make
          ~b:((fun (type res) ->
                 fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res))
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:((fun (type res) ->
                 fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      Test$Bar
    let componentProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun raw ->
                             ("key", (inject (Js_of_ocaml.Js.string raw))))
                          key);(Some ("b", (inject b)));(Some
                                                           ("a", (inject a)))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let component =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                print_endline
                  "This function should be named `Test$Bar$component`";
                React.Dom.createElement "div" ~props:(React.Dom.domProps ())
                  [])
          [@warning "-16"]))
      [@warning "-16"])
    let component =
      let Test$Bar$component
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        component
          ~b:((fun (type res) ->
                 fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res))
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:((fun (type res) ->
                 fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      Test$Bar$component
  end
module type X_int  = sig val x : int end
module Func(M:X_int) =
  struct
    let x = M.x + 1
    let makeProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun raw ->
                             ("key", (inject (Js_of_ocaml.Js.string raw))))
                          key);(Some ("b", (inject b)));(Some
                                                           ("a", (inject a)))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let make =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                print_endline "This function should be named `Test$Func`" M.x;
                React.Dom.createElement "div" ~props:(React.Dom.domProps ())
                  [])
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Test$Func
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        make
          ~b:((fun (type res) ->
                 fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res))
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:((fun (type res) ->
                 fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      Test$Func
  end
module ForwardRef =
  struct
    let makeProps
      : ?key:string ->
          ?ref:React.Dom.domRef -> unit -> <  >  Js_of_ocaml.Js.t
      =
      fun ?key ->
        fun ?ref ->
          fun _ ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                ((([|(Option.map (fun raw -> ("ref", (inject raw))) ref);(
                     Option.map
                       (fun raw ->
                          ("key", (inject (Js_of_ocaml.Js.string raw)))) key)|]
                     |> Array.to_list)
                    |> (List.filter_map (fun x -> x)))
                   |> Array.of_list)
    let make =
      ((fun theRef ->
          React.Dom.createElement "div"
            ~props:(React.Dom.domProps
                      ~ref:(theRef |> Js_of_ocaml.Js.Opt.to_option) ())
            [React.string "ForwardRef"])
      [@warning "-16"])
    let make =
      React.forwardRef
        (let Test$ForwardRef (Props : <  >  Js_of_ocaml.Js.t) theRef =
           make theRef in
         Test$ForwardRef)
  end
module Memo =
  struct
    let makeProps
      : a:'a ->
          ?key:string ->
            unit ->
              < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ?key ->
          fun _ ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                ((([|(Option.map
                        (fun raw ->
                           ("key", (inject (Js_of_ocaml.Js.string raw)))) key);(
                     Some ("a", (inject a)))|] |> Array.to_list)
                    |> (List.filter_map (fun x -> x)))
                   |> Array.of_list)
    let make =
      ((fun ~a ->
          React.Dom.createElement "div" ~props:(React.Dom.domProps ())
            [(Printf.sprintf "`a` is %s" a) |> React.string])
      [@warning "-16"])
    let make =
      React.memo
        (let Test$Memo
           (Props :
             < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
           =
           make
             ~a:((fun (type res) ->
                    fun (type a0) ->
                      fun (a0 : a0 Js_of_ocaml.Js.t) ->
                        fun
                          (_ :
                            a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                          -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
                   (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) in
         Test$Memo)
  end
module MemoCustomCompareProps =
  struct
    let makeProps
      : a:'a ->
          ?key:string ->
            unit ->
              < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ?key ->
          fun _ ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                ((([|(Option.map
                        (fun raw ->
                           ("key", (inject (Js_of_ocaml.Js.string raw)))) key);(
                     Some ("a", (inject a)))|] |> Array.to_list)
                    |> (List.filter_map (fun x -> x)))
                   |> Array.of_list)
    let make =
      ((fun ~a ->
          React.Dom.createElement "div" ~props:(React.Dom.domProps ())
            [(Printf.sprintf "`a` is %d" a) |> React.string])
      [@warning "-16"])
    let make =
      React.memoCustomCompareProps
        (let Test$MemoCustomCompareProps
           (Props :
             < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
           =
           make
             ~a:((fun (type res) ->
                    fun (type a0) ->
                      fun (a0 : a0 Js_of_ocaml.Js.t) ->
                        fun
                          (_ :
                            a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                          -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
                   (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) in
         Test$MemoCustomCompareProps)
        (fun prevPros -> fun nextProps -> false)
  end
let fragment foo =
  ((React.createElement React.Fragment.make
      ((React.Fragment.makeProps ~children:foo ())[@bla ]))
  [@bla ])
let polyChildrenFragment foo bar =
  React.createElementVariadic React.Fragment.make
    (React.Fragment.makeProps ~children:React.null ()) [foo; bar]
let nestedFragment foo bar baz =
  React.createElementVariadic React.Fragment.make
    (React.Fragment.makeProps ~children:React.null ())
    [foo;
    React.createElementVariadic React.Fragment.make
      (React.Fragment.makeProps ~children:React.null ()) [bar; baz]]
let upper = React.createElement Upper.make (Upper.makeProps ())
let upperWithProp =
  React.createElement Upper.make (Upper.makeProps ~count ())
let upperWithChild foo =
  React.createElement Upper.make (Upper.makeProps ~children:foo ())
let upperWithChildren foo bar =
  React.createElementVariadic Upper.make
    (Upper.makeProps ~children:React.null ()) [foo; bar]
let lower = React.Dom.createElement "lower" ~props:(React.Dom.domProps ()) []
let lowerWithChildAndProps foo =
  React.Dom.createElement "lower" ~props:(React.Dom.domProps ~a:1 ~b:"1" ())
    [foo]
let lowerWithChildren foo bar =
  React.Dom.createElement "lower" ~props:(React.Dom.domProps ()) [foo; bar]
let lowerWithChildrenComplex =
  React.Dom.createElement "div"
    ~props:(React.Dom.domProps ~className:"flex-container" ())
    [React.Dom.createElement "div"
       ~props:(React.Dom.domProps ~className:"sidebar" ())
       [React.Dom.createElement "h2"
          ~props:(React.Dom.domProps ~className:"title" ())
          ["jsoo-react" |> s];
       React.Dom.createElement "nav"
         ~props:(React.Dom.domProps ~className:"menu" ())
         [React.Dom.createElement "ul" ~props:(React.Dom.domProps ())
            [(examples |>
                (List.map
                   (fun e ->
                      React.Dom.createElement "li"
                        ~props:(React.Dom.domProps ~key:(e.path) ())
                        [React.Dom.createElement "a"
                           ~props:(React.Dom.domProps ~href:(e.path)
                                     ~onClick:(fun event ->
                                                 ReactEvent.Mouse.preventDefault
                                                   event;
                                                 ReactRouter.push e.path) ())
                           [e.title |> s]])))
               |> React.list]]]]
let lowerWithChildrenComplex2 =
  React.Dom.createElement "div"
    ~props:(React.Dom.domProps ~className:"content-wrapper" ())
    [React.Dom.createElement "div"
       ~props:(React.Dom.domProps ~className:"content" ())
       [(let example =
           (examples |>
              (List.find_opt
                 (fun e ->
                    e.path =
                      ((List.nth_opt url.path 0) |>
                         (Option.value ~default:"")))))
             |> (Option.value ~default:firstExample) in
         React.Dom.createElement "div" ~props:(React.Dom.domProps ())
           [React.Dom.createElement "h2" ~props:(React.Dom.domProps ())
              [example.title |> s];
           React.Dom.createElement "h4" ~props:(React.Dom.domProps ())
             ["Rendered component" |> s];
           example.element;
           React.Dom.createElement "h4" ~props:(React.Dom.domProps ())
             ["Code" |> s];
           example.code])]]
let nestedElement =
  React.createElement Foo.Bar.make (Foo.Bar.makeProps ~a:1 ~b:"1" ())
